/* automatically generated by rust-bindgen 0.61.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __GNUC_VA_LIST: u32 = 1;
pub const epicsThreadPriorityMax: u32 = 99;
pub const epicsThreadPriorityMin: u32 = 0;
pub const epicsThreadPriorityLow: u32 = 10;
pub const epicsThreadPriorityMedium: u32 = 50;
pub const epicsThreadPriorityHigh: u32 = 90;
pub const epicsThreadPriorityCAServerLow: u32 = 20;
pub const epicsThreadPriorityCAServerHigh: u32 = 40;
pub const epicsThreadPriorityScanLow: u32 = 60;
pub const epicsThreadPriorityScanHigh: u32 = 70;
pub const epicsThreadPriorityIocsh: u32 = 91;
pub const epicsThreadPriorityBaseMax: u32 = 91;
pub const EPICS_THREAD_ONCE_INIT: u32 = 0;
pub const _PTHREAD_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &[u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const MAX_STRING_SIZE: u32 = 40;
pub const CA_K_INFO: u32 = 3;
pub const CA_K_ERROR: u32 = 2;
pub const CA_K_SUCCESS: u32 = 1;
pub const CA_K_WARNING: u32 = 0;
pub const CA_K_SEVERE: u32 = 4;
pub const CA_K_FATAL: u32 = 6;
pub const CA_M_MSG_NO: u32 = 65528;
pub const CA_M_SEVERITY: u32 = 7;
pub const CA_M_LEVEL: u32 = 3;
pub const CA_M_SUCCESS: u32 = 1;
pub const CA_M_ERROR: u32 = 2;
pub const CA_M_SEVERE: u32 = 4;
pub const CA_S_MSG_NO: u32 = 13;
pub const CA_S_SEVERITY: u32 = 3;
pub const CA_V_MSG_NO: u32 = 3;
pub const CA_V_SEVERITY: u32 = 0;
pub const CA_V_SUCCESS: u32 = 0;
pub const M_asLib: u32 = 32833536;
pub const M_bucket: u32 = 32899072;
pub const M_devLib: u32 = 32964608;
pub const M_stdlib: u32 = 33030144;
pub const M_pool: u32 = 33095680;
pub const M_time: u32 = 33161216;
pub const M_dbAccess: u32 = 33488896;
pub const M_dbLib: u32 = 33554432;
pub const M_drvSup: u32 = 33619968;
pub const M_devSup: u32 = 33685504;
pub const M_recSup: u32 = 33751040;
pub const M_cas: u32 = 34144256;
pub const M_gddFuncTbl: u32 = 34209792;
pub const M_casApp: u32 = 34275328;
pub const POSIX_TIME_AT_EPICS_EPOCH: u32 = 631152000;
pub const epicsTimeOK: u32 = 0;
pub const S_time_noProvider: u32 = 33161217;
pub const S_time_badEvent: u32 = 33161218;
pub const S_time_badArgs: u32 = 33161219;
pub const S_time_noMemory: u32 = 33161220;
pub const S_time_unsynchronized: u32 = 33161221;
pub const S_time_timezone: u32 = 33161222;
pub const S_time_conversion: u32 = 33161223;
pub const epicsTimeEventCurrentTime: u32 = 0;
pub const epicsTimeEventBestTime: i32 = -1;
pub const epicsTimeEventDeviceTime: i32 = -2;
pub const MAX_UNITS_SIZE: u32 = 8;
pub const MAX_ENUM_STRING_SIZE: u32 = 26;
pub const MAX_ENUM_STATES: u32 = 16;
pub const DBF_STRING: u32 = 0;
pub const DBF_INT: u32 = 1;
pub const DBF_SHORT: u32 = 1;
pub const DBF_FLOAT: u32 = 2;
pub const DBF_ENUM: u32 = 3;
pub const DBF_CHAR: u32 = 4;
pub const DBF_LONG: u32 = 5;
pub const DBF_DOUBLE: u32 = 6;
pub const DBF_NO_ACCESS: u32 = 7;
pub const LAST_TYPE: u32 = 6;
pub const DBR_STRING: u32 = 0;
pub const DBR_INT: u32 = 1;
pub const DBR_SHORT: u32 = 1;
pub const DBR_FLOAT: u32 = 2;
pub const DBR_ENUM: u32 = 3;
pub const DBR_CHAR: u32 = 4;
pub const DBR_LONG: u32 = 5;
pub const DBR_DOUBLE: u32 = 6;
pub const DBR_STS_STRING: u32 = 7;
pub const DBR_STS_SHORT: u32 = 8;
pub const DBR_STS_INT: u32 = 8;
pub const DBR_STS_FLOAT: u32 = 9;
pub const DBR_STS_ENUM: u32 = 10;
pub const DBR_STS_CHAR: u32 = 11;
pub const DBR_STS_LONG: u32 = 12;
pub const DBR_STS_DOUBLE: u32 = 13;
pub const DBR_TIME_STRING: u32 = 14;
pub const DBR_TIME_INT: u32 = 15;
pub const DBR_TIME_SHORT: u32 = 15;
pub const DBR_TIME_FLOAT: u32 = 16;
pub const DBR_TIME_ENUM: u32 = 17;
pub const DBR_TIME_CHAR: u32 = 18;
pub const DBR_TIME_LONG: u32 = 19;
pub const DBR_TIME_DOUBLE: u32 = 20;
pub const DBR_GR_STRING: u32 = 21;
pub const DBR_GR_SHORT: u32 = 22;
pub const DBR_GR_INT: u32 = 22;
pub const DBR_GR_FLOAT: u32 = 23;
pub const DBR_GR_ENUM: u32 = 24;
pub const DBR_GR_CHAR: u32 = 25;
pub const DBR_GR_LONG: u32 = 26;
pub const DBR_GR_DOUBLE: u32 = 27;
pub const DBR_CTRL_STRING: u32 = 28;
pub const DBR_CTRL_SHORT: u32 = 29;
pub const DBR_CTRL_INT: u32 = 29;
pub const DBR_CTRL_FLOAT: u32 = 30;
pub const DBR_CTRL_ENUM: u32 = 31;
pub const DBR_CTRL_CHAR: u32 = 32;
pub const DBR_CTRL_LONG: u32 = 33;
pub const DBR_CTRL_DOUBLE: u32 = 34;
pub const DBR_PUT_ACKT: u32 = 35;
pub const DBR_PUT_ACKS: u32 = 36;
pub const DBR_STSACK_STRING: u32 = 37;
pub const DBR_CLASS_NAME: u32 = 38;
pub const LAST_BUFFER_TYPE: u32 = 38;
pub const db_strval_dim: u32 = 40;
pub const db_units_dim: u32 = 8;
pub const db_desc_dim: u32 = 24;
pub const db_name_dim: u32 = 36;
pub const db_state_dim: u32 = 16;
pub const db_state_text_dim: u32 = 26;
pub const DBE_VALUE: u32 = 1;
pub const DBE_ARCHIVE: u32 = 2;
pub const DBE_LOG: u32 = 2;
pub const DBE_ALARM: u32 = 4;
pub const DBE_PROPERTY: u32 = 8;
pub const CA_OP_GET: u32 = 0;
pub const CA_OP_PUT: u32 = 1;
pub const CA_OP_CREATE_CHANNEL: u32 = 2;
pub const CA_OP_ADD_EVENT: u32 = 3;
pub const CA_OP_CLEAR_EVENT: u32 = 4;
pub const CA_OP_OTHER: u32 = 5;
pub const CA_OP_CONN_UP: u32 = 6;
pub const CA_OP_CONN_DOWN: u32 = 7;
pub const CA_OP_SEARCH: u32 = 2;
pub const TYPENOTCONN: i32 = -1;
pub const CA_PRIORITY_MAX: u32 = 99;
pub const CA_PRIORITY_MIN: u32 = 0;
pub const CA_PRIORITY_DEFAULT: u32 = 0;
pub const CA_PRIORITY_DB_LINKS: u32 = 80;
pub const CA_PRIORITY_ARCHIVE: u32 = 20;
pub const CA_PRIORITY_OPI: u32 = 0;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type EPICSTHREADFUNC =
    ::std::option::Option<unsafe extern "C" fn(parm: *mut ::std::os::raw::c_void)>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum epicsThreadStackSizeClass {
    epicsThreadStackSmall = 0,
    epicsThreadStackMedium = 1,
    epicsThreadStackBig = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum epicsThreadBooleanStatus {
    epicsThreadBooleanStatusFail = 0,
    epicsThreadBooleanStatusSuccess = 1,
}
extern "C" {
    pub fn epicsThreadGetStackSize(size: epicsThreadStackSizeClass) -> ::std::os::raw::c_uint;
}
pub type epicsThreadId = *mut epicsThreadOSD;
pub type epicsThreadOnceId = epicsThreadId;
extern "C" {
    pub fn epicsThreadOnce(
        id: *mut epicsThreadOnceId,
        arg1: EPICSTHREADFUNC,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn epicsThreadRealtimeLock();
}
extern "C" {
    pub fn epicsThreadExitMain();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epicsThreadOpts {
    pub priority: ::std::os::raw::c_uint,
    pub stackSize: ::std::os::raw::c_uint,
    pub joinable: ::std::os::raw::c_uint,
}
extern "C" {
    pub fn epicsThreadCreateOpt(
        name: *const ::std::os::raw::c_char,
        funptr: EPICSTHREADFUNC,
        parm: *mut ::std::os::raw::c_void,
        opts: *const epicsThreadOpts,
    ) -> epicsThreadId;
}
extern "C" {
    pub fn epicsThreadCreate(
        name: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_uint,
        stackSize: ::std::os::raw::c_uint,
        funptr: EPICSTHREADFUNC,
        parm: *mut ::std::os::raw::c_void,
    ) -> epicsThreadId;
}
extern "C" {
    pub fn epicsThreadMustCreate(
        name: *const ::std::os::raw::c_char,
        priority: ::std::os::raw::c_uint,
        stackSize: ::std::os::raw::c_uint,
        funptr: EPICSTHREADFUNC,
        parm: *mut ::std::os::raw::c_void,
    ) -> epicsThreadId;
}
extern "C" {
    pub fn epicsThreadMustJoin(id: epicsThreadId);
}
extern "C" {
    pub fn epicsThreadSuspendSelf();
}
extern "C" {
    pub fn epicsThreadResume(id: epicsThreadId);
}
extern "C" {
    pub fn epicsThreadGetPriority(id: epicsThreadId) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn epicsThreadGetPrioritySelf() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn epicsThreadSetPriority(id: epicsThreadId, priority: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn epicsThreadHighestPriorityLevelBelow(
        priority: ::std::os::raw::c_uint,
        pPriorityJustBelow: *mut ::std::os::raw::c_uint,
    ) -> epicsThreadBooleanStatus;
}
extern "C" {
    pub fn epicsThreadLowestPriorityLevelAbove(
        priority: ::std::os::raw::c_uint,
        pPriorityJustAbove: *mut ::std::os::raw::c_uint,
    ) -> epicsThreadBooleanStatus;
}
extern "C" {
    pub fn epicsThreadIsEqual(id1: epicsThreadId, id2: epicsThreadId) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsThreadIsSuspended(id: epicsThreadId) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsThreadSleep(seconds: f64);
}
extern "C" {
    pub fn epicsThreadSleepQuantum() -> f64;
}
extern "C" {
    pub fn epicsThreadGetIdSelf() -> epicsThreadId;
}
extern "C" {
    pub fn epicsThreadGetId(name: *const ::std::os::raw::c_char) -> epicsThreadId;
}
extern "C" {
    pub fn epicsThreadGetCPUs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsThreadGetNameSelf() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn epicsThreadGetName(id: epicsThreadId, name: *mut ::std::os::raw::c_char, size: usize);
}
extern "C" {
    pub fn epicsThreadIsOkToBlock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsThreadSetOkToBlock(isOkToBlock: ::std::os::raw::c_int);
}
extern "C" {
    pub fn epicsThreadShowAll(level: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn epicsThreadShow(id: epicsThreadId, level: ::std::os::raw::c_uint);
}
pub type EPICS_THREAD_HOOK_ROUTINE = ::std::option::Option<unsafe extern "C" fn(id: epicsThreadId)>;
extern "C" {
    pub fn epicsThreadHookAdd(hook: EPICS_THREAD_HOOK_ROUTINE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsThreadHookDelete(hook: EPICS_THREAD_HOOK_ROUTINE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsThreadHooksShow();
}
extern "C" {
    pub fn epicsThreadMap(func: EPICS_THREAD_HOOK_ROUTINE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epicsThreadPrivateOSD {
    _unused: [u8; 0],
}
pub type epicsThreadPrivateId = *mut epicsThreadPrivateOSD;
extern "C" {
    pub fn epicsThreadPrivateCreate() -> epicsThreadPrivateId;
}
extern "C" {
    pub fn epicsThreadPrivateDelete(id: epicsThreadPrivateId);
}
extern "C" {
    pub fn epicsThreadPrivateSet(arg1: epicsThreadPrivateId, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn epicsThreadPrivateGet(arg1: epicsThreadPrivateId) -> *mut ::std::os::raw::c_void;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = _bindgen_ty_1::PTHREAD_CREATE_JOINABLE;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = _bindgen_ty_1::PTHREAD_CREATE_DETACHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    PTHREAD_CREATE_JOINABLE = 0,
    PTHREAD_CREATE_DETACHED = 1,
}
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_ADAPTIVE_NP;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_TIMED_NP;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_RECURSIVE_NP;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_ERRORCHECK_NP;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = _bindgen_ty_2::PTHREAD_MUTEX_TIMED_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    PTHREAD_MUTEX_TIMED_NP = 0,
    PTHREAD_MUTEX_RECURSIVE_NP = 1,
    PTHREAD_MUTEX_ERRORCHECK_NP = 2,
    PTHREAD_MUTEX_ADAPTIVE_NP = 3,
}
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = _bindgen_ty_3::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = _bindgen_ty_3::PTHREAD_MUTEX_STALLED;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = _bindgen_ty_3::PTHREAD_MUTEX_ROBUST;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = _bindgen_ty_3::PTHREAD_MUTEX_ROBUST;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_3 {
    PTHREAD_MUTEX_STALLED = 0,
    PTHREAD_MUTEX_ROBUST = 1,
}
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = _bindgen_ty_4::PTHREAD_PRIO_NONE;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = _bindgen_ty_4::PTHREAD_PRIO_INHERIT;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = _bindgen_ty_4::PTHREAD_PRIO_PROTECT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_4 {
    PTHREAD_PRIO_NONE = 0,
    PTHREAD_PRIO_INHERIT = 1,
    PTHREAD_PRIO_PROTECT = 2,
}
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 =
    _bindgen_ty_5::PTHREAD_RWLOCK_PREFER_READER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 =
    _bindgen_ty_5::PTHREAD_RWLOCK_PREFER_WRITER_NP;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 =
    _bindgen_ty_5::PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = _bindgen_ty_5::PTHREAD_RWLOCK_PREFER_READER_NP;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_5 {
    PTHREAD_RWLOCK_PREFER_READER_NP = 0,
    PTHREAD_RWLOCK_PREFER_WRITER_NP = 1,
    PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2,
}
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = _bindgen_ty_6::PTHREAD_INHERIT_SCHED;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = _bindgen_ty_6::PTHREAD_EXPLICIT_SCHED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_6 {
    PTHREAD_INHERIT_SCHED = 0,
    PTHREAD_EXPLICIT_SCHED = 1,
}
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = _bindgen_ty_7::PTHREAD_SCOPE_SYSTEM;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = _bindgen_ty_7::PTHREAD_SCOPE_PROCESS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_7 {
    PTHREAD_SCOPE_SYSTEM = 0,
    PTHREAD_SCOPE_PROCESS = 1,
}
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = _bindgen_ty_8::PTHREAD_PROCESS_PRIVATE;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = _bindgen_ty_8::PTHREAD_PROCESS_SHARED;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_8 {
    PTHREAD_PROCESS_PRIVATE = 0,
    PTHREAD_PROCESS_SHARED = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = _bindgen_ty_9::PTHREAD_CANCEL_ENABLE;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = _bindgen_ty_9::PTHREAD_CANCEL_DISABLE;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_9 {
    PTHREAD_CANCEL_ENABLE = 0,
    PTHREAD_CANCEL_DISABLE = 1,
}
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = _bindgen_ty_10::PTHREAD_CANCEL_DEFERRED;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = _bindgen_ty_10::PTHREAD_CANCEL_ASYNCHRONOUS;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_10 {
    PTHREAD_CANCEL_DEFERRED = 0,
    PTHREAD_CANCEL_ASYNCHRONOUS = 1,
}
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ELLNODE {
    pub next: *mut ELLNODE,
    pub previous: *mut ELLNODE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ELLLIST {
    pub node: ELLNODE,
    pub count: ::std::os::raw::c_int,
}
pub type FREEFUNC = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn ellAdd(pList: *mut ELLLIST, pNode: *mut ELLNODE);
}
extern "C" {
    pub fn ellConcat(pDstList: *mut ELLLIST, pAddList: *mut ELLLIST);
}
extern "C" {
    pub fn ellDelete(pList: *mut ELLLIST, pNode: *mut ELLNODE);
}
extern "C" {
    pub fn ellExtract(
        pSrcList: *mut ELLLIST,
        pStartNode: *mut ELLNODE,
        pEndNode: *mut ELLNODE,
        pDstList: *mut ELLLIST,
    );
}
extern "C" {
    pub fn ellGet(pList: *mut ELLLIST) -> *mut ELLNODE;
}
extern "C" {
    pub fn ellPop(pList: *mut ELLLIST) -> *mut ELLNODE;
}
extern "C" {
    pub fn ellInsert(plist: *mut ELLLIST, pPrev: *mut ELLNODE, pNode: *mut ELLNODE);
}
extern "C" {
    pub fn ellNth(pList: *mut ELLLIST, nodeNum: ::std::os::raw::c_int) -> *mut ELLNODE;
}
extern "C" {
    pub fn ellNStep(pNode: *mut ELLNODE, nStep: ::std::os::raw::c_int) -> *mut ELLNODE;
}
extern "C" {
    pub fn ellFind(pList: *mut ELLLIST, pNode: *mut ELLNODE) -> ::std::os::raw::c_int;
}
pub type pListCmp = ::std::option::Option<
    unsafe extern "C" fn(A: *const ELLNODE, B: *const ELLNODE) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ellSortStable(pList: *mut ELLLIST, pListCmp: pListCmp);
}
extern "C" {
    pub fn ellFree2(pList: *mut ELLLIST, freeFunc: FREEFUNC);
}
extern "C" {
    pub fn ellVerify(pList: *mut ELLLIST);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epicsEventOSD {
    _unused: [u8; 0],
}
pub type epicsEventId = *mut epicsEventOSD;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum epicsEventStatus {
    epicsEventOK = 0,
    epicsEventWaitTimeout = 1,
    epicsEventError = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum epicsEventInitialState {
    epicsEventEmpty = 0,
    epicsEventFull = 1,
}
extern "C" {
    pub fn epicsEventCreate(initialState: epicsEventInitialState) -> epicsEventId;
}
extern "C" {
    pub fn epicsEventMustCreate(initialState: epicsEventInitialState) -> epicsEventId;
}
extern "C" {
    pub fn epicsEventDestroy(id: epicsEventId);
}
extern "C" {
    pub fn epicsEventTrigger(id: epicsEventId) -> epicsEventStatus;
}
extern "C" {
    pub fn epicsEventMustTrigger(id: epicsEventId);
}
extern "C" {
    pub fn epicsEventWait(id: epicsEventId) -> epicsEventStatus;
}
extern "C" {
    pub fn epicsEventMustWait(id: epicsEventId);
}
extern "C" {
    pub fn epicsEventWaitWithTimeout(id: epicsEventId, timeOut: f64) -> epicsEventStatus;
}
extern "C" {
    pub fn epicsEventTryWait(id: epicsEventId) -> epicsEventStatus;
}
extern "C" {
    pub fn epicsEventShow(id: epicsEventId, level: ::std::os::raw::c_uint);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct epicsThreadOSD {
    pub node: ELLNODE,
    pub refcnt: ::std::os::raw::c_int,
    pub tid: pthread_t,
    pub lwpId: pid_t,
    pub attr: pthread_attr_t,
    pub schedParam: sched_param,
    pub schedPolicy: ::std::os::raw::c_int,
    pub createFunc: EPICSTHREADFUNC,
    pub createArg: *mut ::std::os::raw::c_void,
    pub suspendEvent: epicsEventId,
    pub isSuspended: ::std::os::raw::c_int,
    pub isEpicsThread: ::std::os::raw::c_int,
    pub isRealTimeScheduled: ::std::os::raw::c_int,
    pub isOnThreadList: ::std::os::raw::c_int,
    pub osiPriority: ::std::os::raw::c_uint,
    pub joinable: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 1usize],
}
extern "C" {
    pub fn epicsThreadGetPosixThreadId(id: epicsThreadId) -> pthread_t;
}
extern "C" {
    pub fn epicsThreadGetPosixPriority(id: epicsThreadId) -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum epicsBoolean {
    epicsFalse = 0,
    epicsTrue = 1,
}
pub type epicsInt8 = ::std::os::raw::c_char;
pub type epicsUInt8 = ::std::os::raw::c_uchar;
pub type epicsInt16 = ::std::os::raw::c_short;
pub type epicsUInt16 = ::std::os::raw::c_ushort;
pub type epicsInt32 = ::std::os::raw::c_int;
pub type epicsUInt32 = ::std::os::raw::c_uint;
pub type epicsInt64 = ::std::os::raw::c_longlong;
pub type epicsUInt64 = ::std::os::raw::c_ulonglong;
pub type epicsEnum16 = epicsUInt16;
pub type epicsFloat32 = f32;
pub type epicsFloat64 = f64;
pub type epicsStatus = epicsInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epicsString {
    pub length: ::std::os::raw::c_uint,
    pub pString: *mut ::std::os::raw::c_char,
}
pub type epicsOldString = [::std::os::raw::c_char; 40usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub union epics_any {
    pub int8: epicsInt8,
    pub uInt8: epicsUInt8,
    pub int16: epicsInt16,
    pub uInt16: epicsUInt16,
    pub enum16: epicsEnum16,
    pub int32: epicsInt32,
    pub uInt32: epicsUInt32,
    pub int64: epicsInt64,
    pub uInt64: epicsUInt64,
    pub float32: epicsFloat32,
    pub float64: epicsFloat64,
    pub string: epicsString,
}
pub type epicsAny = epics_any;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum epicsType {
    epicsInt8T = 0,
    epicsUInt8T = 1,
    epicsInt16T = 2,
    epicsUInt16T = 3,
    epicsEnum16T = 4,
    epicsInt32T = 5,
    epicsUInt32T = 6,
    epicsFloat32T = 7,
    epicsFloat64T = 8,
    epicsStringT = 9,
    epicsOldStringT = 10,
}
extern "C" {
    pub static mut epicsTypeNames: [*const ::std::os::raw::c_char; 11usize];
}
extern "C" {
    pub static mut epicsTypeCodeNames: [*const ::std::os::raw::c_char; 11usize];
}
extern "C" {
    pub static epicsTypeSizes: [::std::os::raw::c_uint; 11usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum epicsTypeClass {
    epicsIntC = 0,
    epicsUIntC = 1,
    epicsEnumC = 2,
    epicsFloatC = 3,
    epicsStringC = 4,
    epicsOldStringC = 5,
}
extern "C" {
    pub static epicsTypeClasses: [epicsTypeClass; 11usize];
}
extern "C" {
    pub static mut epicsTypeAnyFieldName: [*const ::std::os::raw::c_char; 11usize];
}
extern "C" {
    pub fn ca_message(ca_status: ::std::os::raw::c_long) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut ca_message_text: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn convertDoubleToWakeTime(timeout: f64, wakeTime: *mut timespec);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epicsTimeStamp {
    pub secPastEpoch: epicsUInt32,
    pub nsec: epicsUInt32,
}
pub type epicsUTag = epicsUInt64;
extern "C" {
    pub fn epicsTimeGetCurrent(pDest: *mut epicsTimeStamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeGetEvent(
        pDest: *mut epicsTimeStamp,
        eventNumber: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeGetMonotonic(pDest: *mut epicsTimeStamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeGetCurrentInt(pDest: *mut epicsTimeStamp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeGetEventInt(
        pDest: *mut epicsTimeStamp,
        eventNumber: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeToTime_t(
        pDest: *mut time_t,
        pSrc: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeFromTime_t(pDest: *mut epicsTimeStamp, src: time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeToTM(
        pDest: *mut tm,
        pNSecDest: *mut ::std::os::raw::c_ulong,
        pSrc: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeToGMTM(
        pDest: *mut tm,
        pNSecDest: *mut ::std::os::raw::c_ulong,
        pSrc: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeFromTM(
        pDest: *mut epicsTimeStamp,
        pSrc: *const tm,
        nSecSrc: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeFromGMTM(
        pDest: *mut epicsTimeStamp,
        pSrc: *const tm,
        nSecSrc: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeToTimespec(
        pDest: *mut timespec,
        pSrc: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeFromTimespec(
        pDest: *mut epicsTimeStamp,
        pSrc: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeToTimeval(
        pDest: *mut timeval,
        pSrc: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeFromTimeval(
        pDest: *mut epicsTimeStamp,
        pSrc: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeDiffInSeconds(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> f64;
}
extern "C" {
    pub fn epicsTimeAddSeconds(pDest: *mut epicsTimeStamp, secondsToAdd: f64);
}
extern "C" {
    pub fn epicsTimeDiffInNS(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> epicsInt64;
}
extern "C" {
    pub fn epicsTimeEqual(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeNotEqual(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeLessThan(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeLessThanEqual(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeGreaterThan(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeGreaterThanEqual(
        pLeft: *const epicsTimeStamp,
        pRight: *const epicsTimeStamp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTimeToStrftime(
        pBuff: *mut ::std::os::raw::c_char,
        bufLength: usize,
        pFormat: *const ::std::os::raw::c_char,
        pTS: *const epicsTimeStamp,
    ) -> usize;
}
extern "C" {
    pub fn epicsTimeShow(arg1: *const epicsTimeStamp, interestLevel: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn epicsTime_localtime(clock: *const time_t, result: *mut tm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsTime_gmtime(clock: *const time_t, result: *mut tm) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn epicsMonotonicResolution() -> epicsUInt64;
}
extern "C" {
    pub fn epicsMonotonicGet() -> epicsUInt64;
}
pub type dbr_string_t = epicsOldString;
pub type dbr_char_t = epicsUInt8;
pub type dbr_short_t = epicsInt16;
pub type dbr_ushort_t = epicsUInt16;
pub type dbr_int_t = epicsInt16;
pub type dbr_enum_t = epicsUInt16;
pub type dbr_long_t = epicsInt32;
pub type dbr_ulong_t = epicsUInt32;
pub type dbr_float_t = epicsFloat32;
pub type dbr_double_t = epicsFloat64;
pub type dbr_put_ackt_t = epicsUInt16;
pub type dbr_put_acks_t = epicsUInt16;
pub type dbr_stsack_string_t = epicsOldString;
pub type dbr_class_name_t = epicsOldString;
extern "C" {
    pub static epicsTypeToDBR_XXXX: [::std::os::raw::c_int; 11usize];
}
extern "C" {
    pub static DBR_XXXXToEpicsType: [epicsType; 39usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_string {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub value: dbr_string_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_stsack_string {
    pub status: dbr_ushort_t,
    pub severity: dbr_ushort_t,
    pub ackt: dbr_ushort_t,
    pub acks: dbr_ushort_t,
    pub value: dbr_string_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_int {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub value: dbr_short_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_short {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub value: dbr_short_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_float {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub value: dbr_float_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_enum {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub value: dbr_enum_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_char {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub RISC_pad: dbr_char_t,
    pub value: dbr_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_long {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub value: dbr_long_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_sts_double {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub RISC_pad: dbr_long_t,
    pub value: dbr_double_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_time_string {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub stamp: epicsTimeStamp,
    pub value: dbr_string_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_time_short {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub stamp: epicsTimeStamp,
    pub RISC_pad: dbr_short_t,
    pub value: dbr_short_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_time_float {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub stamp: epicsTimeStamp,
    pub value: dbr_float_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_time_enum {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub stamp: epicsTimeStamp,
    pub RISC_pad: dbr_short_t,
    pub value: dbr_enum_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_time_char {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub stamp: epicsTimeStamp,
    pub RISC_pad0: dbr_short_t,
    pub RISC_pad1: dbr_char_t,
    pub value: dbr_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_time_long {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub stamp: epicsTimeStamp,
    pub value: dbr_long_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_time_double {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub stamp: epicsTimeStamp,
    pub RISC_pad: dbr_long_t,
    pub value: dbr_double_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_gr_int {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_short_t,
    pub lower_disp_limit: dbr_short_t,
    pub upper_alarm_limit: dbr_short_t,
    pub upper_warning_limit: dbr_short_t,
    pub lower_warning_limit: dbr_short_t,
    pub lower_alarm_limit: dbr_short_t,
    pub value: dbr_short_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_gr_short {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_short_t,
    pub lower_disp_limit: dbr_short_t,
    pub upper_alarm_limit: dbr_short_t,
    pub upper_warning_limit: dbr_short_t,
    pub lower_warning_limit: dbr_short_t,
    pub lower_alarm_limit: dbr_short_t,
    pub value: dbr_short_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_gr_float {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub precision: dbr_short_t,
    pub RISC_pad0: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_float_t,
    pub lower_disp_limit: dbr_float_t,
    pub upper_alarm_limit: dbr_float_t,
    pub upper_warning_limit: dbr_float_t,
    pub lower_warning_limit: dbr_float_t,
    pub lower_alarm_limit: dbr_float_t,
    pub value: dbr_float_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_gr_enum {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub no_str: dbr_short_t,
    pub strs: [[::std::os::raw::c_char; 26usize]; 16usize],
    pub value: dbr_enum_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_gr_char {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_char_t,
    pub lower_disp_limit: dbr_char_t,
    pub upper_alarm_limit: dbr_char_t,
    pub upper_warning_limit: dbr_char_t,
    pub lower_warning_limit: dbr_char_t,
    pub lower_alarm_limit: dbr_char_t,
    pub RISC_pad: dbr_char_t,
    pub value: dbr_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_gr_long {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_long_t,
    pub lower_disp_limit: dbr_long_t,
    pub upper_alarm_limit: dbr_long_t,
    pub upper_warning_limit: dbr_long_t,
    pub lower_warning_limit: dbr_long_t,
    pub lower_alarm_limit: dbr_long_t,
    pub value: dbr_long_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_gr_double {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub precision: dbr_short_t,
    pub RISC_pad0: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_double_t,
    pub lower_disp_limit: dbr_double_t,
    pub upper_alarm_limit: dbr_double_t,
    pub upper_warning_limit: dbr_double_t,
    pub lower_warning_limit: dbr_double_t,
    pub lower_alarm_limit: dbr_double_t,
    pub value: dbr_double_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_ctrl_int {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_short_t,
    pub lower_disp_limit: dbr_short_t,
    pub upper_alarm_limit: dbr_short_t,
    pub upper_warning_limit: dbr_short_t,
    pub lower_warning_limit: dbr_short_t,
    pub lower_alarm_limit: dbr_short_t,
    pub upper_ctrl_limit: dbr_short_t,
    pub lower_ctrl_limit: dbr_short_t,
    pub value: dbr_short_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_ctrl_short {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_short_t,
    pub lower_disp_limit: dbr_short_t,
    pub upper_alarm_limit: dbr_short_t,
    pub upper_warning_limit: dbr_short_t,
    pub lower_warning_limit: dbr_short_t,
    pub lower_alarm_limit: dbr_short_t,
    pub upper_ctrl_limit: dbr_short_t,
    pub lower_ctrl_limit: dbr_short_t,
    pub value: dbr_short_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_ctrl_float {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub precision: dbr_short_t,
    pub RISC_pad: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_float_t,
    pub lower_disp_limit: dbr_float_t,
    pub upper_alarm_limit: dbr_float_t,
    pub upper_warning_limit: dbr_float_t,
    pub lower_warning_limit: dbr_float_t,
    pub lower_alarm_limit: dbr_float_t,
    pub upper_ctrl_limit: dbr_float_t,
    pub lower_ctrl_limit: dbr_float_t,
    pub value: dbr_float_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_ctrl_enum {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub no_str: dbr_short_t,
    pub strs: [[::std::os::raw::c_char; 26usize]; 16usize],
    pub value: dbr_enum_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_ctrl_char {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_char_t,
    pub lower_disp_limit: dbr_char_t,
    pub upper_alarm_limit: dbr_char_t,
    pub upper_warning_limit: dbr_char_t,
    pub lower_warning_limit: dbr_char_t,
    pub lower_alarm_limit: dbr_char_t,
    pub upper_ctrl_limit: dbr_char_t,
    pub lower_ctrl_limit: dbr_char_t,
    pub RISC_pad: dbr_char_t,
    pub value: dbr_char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_ctrl_long {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_long_t,
    pub lower_disp_limit: dbr_long_t,
    pub upper_alarm_limit: dbr_long_t,
    pub upper_warning_limit: dbr_long_t,
    pub lower_warning_limit: dbr_long_t,
    pub lower_alarm_limit: dbr_long_t,
    pub upper_ctrl_limit: dbr_long_t,
    pub lower_ctrl_limit: dbr_long_t,
    pub value: dbr_long_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dbr_ctrl_double {
    pub status: dbr_short_t,
    pub severity: dbr_short_t,
    pub precision: dbr_short_t,
    pub RISC_pad0: dbr_short_t,
    pub units: [::std::os::raw::c_char; 8usize],
    pub upper_disp_limit: dbr_double_t,
    pub lower_disp_limit: dbr_double_t,
    pub upper_alarm_limit: dbr_double_t,
    pub upper_warning_limit: dbr_double_t,
    pub lower_warning_limit: dbr_double_t,
    pub lower_alarm_limit: dbr_double_t,
    pub upper_ctrl_limit: dbr_double_t,
    pub lower_ctrl_limit: dbr_double_t,
    pub value: dbr_double_t,
}
extern "C" {
    pub static dbr_size: [::std::os::raw::c_ushort; 0usize];
}
extern "C" {
    pub static dbr_value_size: [::std::os::raw::c_ushort; 0usize];
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum dbr_value_class {
    dbr_class_int = 0,
    dbr_class_float = 1,
    dbr_class_string = 2,
    dbr_class_max = 3,
}
extern "C" {
    pub static dbr_value_class: [dbr_value_class; 39usize];
}
extern "C" {
    pub static dbr_value_offset: [::std::os::raw::c_ushort; 39usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union db_access_val {
    pub strval: dbr_string_t,
    pub shrtval: dbr_short_t,
    pub intval: dbr_short_t,
    pub fltval: dbr_float_t,
    pub enmval: dbr_enum_t,
    pub charval: dbr_char_t,
    pub longval: dbr_long_t,
    pub doubleval: dbr_double_t,
    pub sstrval: dbr_sts_string,
    pub sshrtval: dbr_sts_short,
    pub sfltval: dbr_sts_float,
    pub senmval: dbr_sts_enum,
    pub schrval: dbr_sts_char,
    pub slngval: dbr_sts_long,
    pub sdblval: dbr_sts_double,
    pub tstrval: dbr_time_string,
    pub tshrtval: dbr_time_short,
    pub tfltval: dbr_time_float,
    pub tenmval: dbr_time_enum,
    pub tchrval: dbr_time_char,
    pub tlngval: dbr_time_long,
    pub tdblval: dbr_time_double,
    pub gstrval: dbr_sts_string,
    pub gshrtval: dbr_gr_short,
    pub gfltval: dbr_gr_float,
    pub genmval: dbr_gr_enum,
    pub gchrval: dbr_gr_char,
    pub glngval: dbr_gr_long,
    pub gdblval: dbr_gr_double,
    pub cstrval: dbr_sts_string,
    pub cshrtval: dbr_ctrl_short,
    pub cfltval: dbr_ctrl_float,
    pub cenmval: dbr_ctrl_enum,
    pub cchrval: dbr_ctrl_char,
    pub clngval: dbr_ctrl_long,
    pub cdblval: dbr_ctrl_double,
    pub putackt: dbr_put_ackt_t,
    pub putacks: dbr_put_acks_t,
    pub sastrval: dbr_sts_string,
    pub classname: dbr_string_t,
}
extern "C" {
    pub static mut dbf_text: [*const ::std::os::raw::c_char; 9usize];
}
extern "C" {
    pub static dbf_text_dim: ::std::os::raw::c_short;
}
extern "C" {
    pub static mut dbf_text_invalid: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut dbr_text: [*const ::std::os::raw::c_char; 39usize];
}
extern "C" {
    pub static dbr_text_dim: ::std::os::raw::c_short;
}
extern "C" {
    pub static mut dbr_text_invalid: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oldChannelNotify {
    _unused: [u8; 0],
}
pub type chid = *mut oldChannelNotify;
pub type chanId = chid;
pub type chtype = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oldSubscription {
    _unused: [u8; 0],
}
pub type evid = *mut oldSubscription;
pub type ca_real = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct connection_handler_args {
    pub chid: chanId,
    pub op: ::std::os::raw::c_long,
}
pub type caCh = ::std::option::Option<unsafe extern "C" fn(args: connection_handler_args)>;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct ca_access_rights {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
impl ca_access_rights {
    #[inline]
    pub fn read_access(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_access(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn write_access(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_write_access(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        read_access: ::std::os::raw::c_uint,
        write_access: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let read_access: u32 = unsafe { ::std::mem::transmute(read_access) };
            read_access as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let write_access: u32 = unsafe { ::std::mem::transmute(write_access) };
            write_access as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type caar = ca_access_rights;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct access_rights_handler_args {
    pub chid: chanId,
    pub ar: caar,
}
pub type caArh = ::std::option::Option<unsafe extern "C" fn(args: access_rights_handler_args)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_handler_args {
    pub usr: *mut ::std::os::raw::c_void,
    pub chid: chanId,
    pub type_: ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_long,
    pub dbr: *const ::std::os::raw::c_void,
    pub status: ::std::os::raw::c_int,
}
pub type evargs = event_handler_args;
pub type caEventCallBackFunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: event_handler_args)>;
extern "C" {
    pub fn ca_test_event(arg1: event_handler_args);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception_handler_args {
    pub usr: *mut ::std::os::raw::c_void,
    pub chid: chanId,
    pub type_: ::std::os::raw::c_long,
    pub count: ::std::os::raw::c_long,
    pub addr: *mut ::std::os::raw::c_void,
    pub stat: ::std::os::raw::c_long,
    pub op: ::std::os::raw::c_long,
    pub ctx: *const ::std::os::raw::c_char,
    pub pFile: *const ::std::os::raw::c_char,
    pub lineNo: ::std::os::raw::c_uint,
}
pub type CA_SYNC_GID = ::std::os::raw::c_uint;
extern "C" {
    pub fn ca_field_type(chan: chid) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ca_element_count(chan: chid) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ca_name(chan: chid) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ca_set_puser(chan: chid, puser: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ca_puser(chan: chid) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ca_read_access(chan: chid) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ca_write_access(chan: chid) -> ::std::os::raw::c_uint;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum channel_state {
    cs_never_conn = 0,
    cs_prev_conn = 1,
    cs_conn = 2,
    cs_closed = 3,
}
extern "C" {
    pub fn ca_state(chan: chid) -> channel_state;
}
extern "C" {
    pub fn ca_task_initialize() -> ::std::os::raw::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ca_preemptive_callback_select {
    ca_disable_preemptive_callback = 0,
    ca_enable_preemptive_callback = 1,
}
extern "C" {
    pub fn ca_context_create(select: ca_preemptive_callback_select) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_detach_context();
}
extern "C" {
    pub fn ca_task_exit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_context_destroy();
}
pub type capri = ::std::os::raw::c_uint;
extern "C" {
    pub fn ca_create_channel(
        pChanName: *const ::std::os::raw::c_char,
        pConnStateCallback: caCh,
        pUserPrivate: *mut ::std::os::raw::c_void,
        priority: capri,
        pChanID: *mut chid,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_change_connection_event(chan: chid, pfunc: caCh) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_replace_access_rights_event(chan: chid, pfunc: caArh) -> ::std::os::raw::c_int;
}
pub type caExceptionHandler =
    ::std::option::Option<unsafe extern "C" fn(arg1: exception_handler_args)>;
extern "C" {
    pub fn ca_add_exception_event(
        pfunc: caExceptionHandler,
        pArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_clear_channel(chanId: chid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_array_put(
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chanId: chid,
        pValue: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_array_put_callback(
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chanId: chid,
        pValue: *const ::std::os::raw::c_void,
        pFunc: caEventCallBackFunc,
        pArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_array_get(
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chanId: chid,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_array_get_callback(
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chanId: chid,
        pFunc: caEventCallBackFunc,
        pArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_create_subscription(
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chanId: chid,
        mask: ::std::os::raw::c_long,
        pFunc: caEventCallBackFunc,
        pArg: *mut ::std::os::raw::c_void,
        pEventID: *mut evid,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_clear_subscription(eventID: evid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_evid_to_chid(id: evid) -> chid;
}
extern "C" {
    pub fn ca_pend_event(timeOut: ca_real) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_pend_io(timeOut: ca_real) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_pend(timeout: ca_real, early: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_test_io() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_flush_io() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_signal(errorCode: ::std::os::raw::c_long, pCtxStr: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ca_signal_with_file_and_lineno(
        errorCode: ::std::os::raw::c_long,
        pCtxStr: *const ::std::os::raw::c_char,
        pFileStr: *const ::std::os::raw::c_char,
        lineNo: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ca_signal_formated(
        ca_status: ::std::os::raw::c_long,
        pfilenm: *const ::std::os::raw::c_char,
        lineno: ::std::os::raw::c_int,
        pFormat: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ca_host_name(channel: chid) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ca_get_host_name(
        pChan: chid,
        pBuf: *mut ::std::os::raw::c_char,
        bufLength: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type CAFDHANDLER = ::std::option::Option<
    unsafe extern "C" fn(
        parg: *mut ::std::os::raw::c_void,
        fd: ::std::os::raw::c_int,
        opened: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub fn ca_add_fd_registration(
        pHandler: CAFDHANDLER,
        pArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_create(pgid: *mut CA_SYNC_GID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_delete(gid: CA_SYNC_GID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_block(gid: CA_SYNC_GID, timeout: ca_real) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_test(gid: CA_SYNC_GID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_reset(gid: CA_SYNC_GID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_array_get(
        gid: CA_SYNC_GID,
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chan: chid,
        pValue: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_array_put(
        gid: CA_SYNC_GID,
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chan: chid,
        pValue: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_sg_stat(gid: CA_SYNC_GID) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_dump_dbr(
        type_: chtype,
        count: ::std::os::raw::c_uint,
        pbuffer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ca_v42_ok(chan: chid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_version() -> *const ::std::os::raw::c_char;
}
pub type caPrintfFunc = ::std::option::Option<
    unsafe extern "C" fn(
        pformat: *const ::std::os::raw::c_char,
        args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn ca_replace_printf_handler(ca_printf_func: caPrintfFunc) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_get_ioc_connection_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ca_preemtive_callback_is_enabled() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_self_test();
}
extern "C" {
    pub fn ca_beacon_anomaly_count() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ca_search_attempts(chan: chid) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ca_beacon_period(chan: chid) -> f64;
}
extern "C" {
    pub fn ca_receive_watchdog_delay(chan: chid) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ca_client_context {
    _unused: [u8; 0],
}
extern "C" {
    pub fn ca_current_context() -> *mut ca_client_context;
}
extern "C" {
    pub fn ca_attach_context(context: *mut ca_client_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_client_status(level: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_context_status(
        arg1: *mut ca_client_context,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_build_and_connect(
        pChanName: *const ::std::os::raw::c_char,
        arg1: chtype,
        arg2: ::std::os::raw::c_ulong,
        pChanID: *mut chid,
        arg3: *mut ::std::os::raw::c_void,
        pFunc: caCh,
        pArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_search_and_connect(
        pChanName: *const ::std::os::raw::c_char,
        pChanID: *mut chid,
        pFunc: caCh,
        pArg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_channel_status(tid: epicsThreadId) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_clear_event(eventID: evid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_add_masked_array_event(
        type_: chtype,
        count: ::std::os::raw::c_ulong,
        chanId: chid,
        pFunc: caEventCallBackFunc,
        pArg: *mut ::std::os::raw::c_void,
        p_delta: ca_real,
        n_delta: ca_real,
        timeout: ca_real,
        pEventID: *mut evid,
        mask: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_modify_user_name(pUserName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ca_modify_host_name(pHostName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
